#!/usr/bin/env python
import os
import os.path
import sys
import time
import shlex
import signal
import subprocess

import settings

def run(program, *args):
    try:
        pid = os.fork()
        if not pid:
            os.execvp(program, (program,) + args)
    except OSError, e:
        sys.stderr.write("fork failed %d (%s)\n" % (e.errno, e.strerror))
        logger.warning("fork failed %d (%s)\n" % (e.errno, e.strerror))
        sys.exit(1)
    return pid


def handler(signum, frame):
    print "returning back to terminal"


def TopPatchAgent_start():
    pids = []
    if os.path.isfile(settings.AGENT_PID):
        pf = file(settings.AGENT_PID, 'r')
        pids = (pf.read().strip()[1:-1])
	print pids
        pid_no = pids.split(', ')
        pf.close()
        count = 0
        for pid in pid_no:
            if pid:
                count = count + 1
        if count == len(pid_no):
            message = "%s is already running. Pidfile: '%s'\n"
            sys.stderr.write(message % (settings.AGENT_PRODUCT, settings.AGENT_PID))

            sys.exit(1)
    else:
	os.chdir(PATH)
        print '%s is starting. Please wait....' % (settings.AGENT_PRODUCT)
        pid = run(settings.PROGRAM, settings.AGENT_BIN)
        pids.append(pid)
        time.sleep(1)
        file(settings.AGENT_PID, 'w+').write("%s\n" % pids)
        signal.signal(signal.SIGINT, handler)
        time.sleep(5)
        print '%s has been started. Enjoy !!!' % (settings.AGENT_PRODUCT)


def TopPatchAgent_stop():
    if not os.path.isfile(settings.AGENT_PID):
        message = "%s is not running. Stopping Failed...\n"
        sys.stderr.write(message % (settings.AGENT_PRODUCT))
        sys.exit(1)
    else:
        print '%s is going to stop now....' % (settings.AGENT_PRODUCT)
        pf = file(settings.AGENT_PID, 'r')
        pids = (pf.read().strip()[1:-1])
        pid_no = pids.split(', ')
        pf.close()
        os.kill(int(pid_no[0]), signal.SIGTERM)
      	os.remove(settings.AGENT_PID)
        time.sleep(2)
        print '%s has been stopped now !!!' % (settings.AGENT_PRODUCT)

def TopPatchAgent_restart():
    TopPatchAgent_stop()
    print "\n"
    TopPatchAgent_start()

def TopPatchAgent_status():
    if os.path.isfile(settings.AGENT_PID):
        message = "%s is running and the PIDFILE is: '%s'\n"
        sys.stderr.write(message % (settings.AGENT_PRODUCT, settings.AGENT_PID))
        logger.info(message % (settings.AGENT_PRODUCT, settings.AGENT_PID))
        sys.exit(1)
    else:
        print "TopPatch Agent is not running."
        sys.exit(2)

ACTIONS = sys.argv[1]

if __name__ == "__main__":
    if len(sys.argv) == 2:
        if ACTIONS == 'start':
            TopPatchAgent_start()
        elif ACTIONS == 'stop':
            TopPatchAgent_stop()
        elif ACTIONS == 'restart':
            TopPatchAgent_restart()
        elif ACTIONS == 'status':
            TopPatchAgent_status()
        else:
            print "Unknown command: %s" % (ACTIONS)
            sys.exit(2)
        sys.exit(0)
    else:
        print "usage: %s start|stop|restart|status" % sys.argv[0]
